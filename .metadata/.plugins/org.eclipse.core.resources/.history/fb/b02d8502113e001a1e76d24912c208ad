/*******************************************************************************
 *  Name of files:  InitSysTick.c
 *  Description:
 *
 * Linh Vu - vu.t.linh204.work@gmail.com
 * Freelance
 * October 2019
 * Built with CCS v.9.2

 ********************************************************************************/

#include <stdint.h>
#include "inc/tm4c123gh6pm.h"
#include <user_init/InitSysCtl.h>

/*
 #define uSysTick_period 16777215
 #define uSysTick_repeat 840
 */

// Initialize SysTick with busy wait running at bus clock.
void Init_SysTick(void)
{
    NVIC_ST_CTRL_R = 0;                   // disable SysTick during setup
    NVIC_ST_RELOAD_R = NVIC_ST_RELOAD_M;  // maximum reload value
    NVIC_ST_CURRENT_R = 0;                // any write to current clears it
                                          // enable SysTick with core clock
    NVIC_ST_CTRL_R = NVIC_ST_CTRL_ENABLE + NVIC_ST_CTRL_CLK_SRC;
}

// Time delay using busy wait.
// The delay parameter is in units of the core clock. (units of 20 nsec for 50 MHz clock)
void SysTick_Wait(uint32_t delay)
{
    volatile uint32_t elapsedTime;
    uint32_t startTime = NVIC_ST_CURRENT_R;
    do
    {
        elapsedTime = (startTime - NVIC_ST_CURRENT_R) & 0x00FFFFFF;
    }
    while (elapsedTime <= delay);
}

// Time delay using busy wait.
// This assumes 80 MHz system clock.
void SysTick_Wait10ms(uint32_t delay)
{
    uint32_t i;
    for (i = 0; i < delay; i++)
    {
        SysTick_Wait(800000);  // wait 10ms (assumes 80 MHz clock)
    }
}
