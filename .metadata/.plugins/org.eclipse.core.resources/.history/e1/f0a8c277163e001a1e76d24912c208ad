/*******************************************************************************
 *  Name of files:  InitSysTick.c
 *  Description:
 *
 * Linh Vu - vu.t.linh204.work@gmail.com
 * Freelance
 * October 2019
 * Built with CCS v.9.2

 ********************************************************************************/

#include <stdint.h>
#include "inc/tm4c123gh6pm.h"
#include <user_init/InitSysCtl.h>
#include "driverlib/systick.h"

/*
usernote: SysTick là một Timer chính xác.
+ Ta sẽ ghi một giá trị vào thanh ghi 24 bit. Cứ sau một Tick thì thanh ghi sẽ lại
tự trừ giá trị của mình đi một.
+ Thời gian chạy một Tick của SysTick phụ thuộc vào tần số Clock của tm4c
+ Ví dụ với Clock = 80M thì T_1tick = 1/(80*10^6)*10^9 = 12.5 (ns)
+ Hàm SysTick_Wait(delay) với delay là số lần sẽ Tick để hết hàm
+ Như vậy để kết thúc hàm SysTick_Wait sẽ phụ thuộc vào hai yếu tố
       + Tham số truyền delay
       + Tần số Clock của tm4c
+ Công thức tính thời gian đợi như sau:
T(delay,f_clk) = delay * 1/(f_clk)*10^9 (ns)
T(delay,f_clk) = delay * 1/(f_clk)*10^6 (us)
T(delay,f_clk) = delay * 1/(f_clk)*10^3 (ms)
T(delay,f_clk) = delay * 1/(f_clk)      (s)
ví dụ với tần số chạy 80MHz thì f_clk = 80*10^6
1s = 10^3ms = 10^6us = 10^9ns
 */

// Initialize SysTick with busy wait running at bus clock.
void Init_SysTick(void)
{
    NVIC_ST_CTRL_R = 0;                   // disable SysTick during setup
    NVIC_ST_RELOAD_R = NVIC_ST_RELOAD_M;  // maximum reload value
    NVIC_ST_CURRENT_R = 0;                // any write to current clears it
                                          // enable SysTick with core clock
    NVIC_ST_CTRL_R = NVIC_ST_CTRL_ENABLE + NVIC_ST_CTRL_CLK_SRC;
}

// Time delay using busy wait.
// The delay parameter is in units of the core clock. (units of 20 nsec for 50 MHz clock)
//
void SysTick_Wait(uint32_t delay)
{
    volatile uint32_t elapsedTime;
    //uint32_t CountPos;
    //uint32_t CountNeg;
    uint32_t startTime = NVIC_ST_CURRENT_R;
    CountPos = SysTickValueGet();
    do
    {
        elapsedTime = (startTime - NVIC_ST_CURRENT_R) & 0x00FFFFFF;
    }
    while (elapsedTime <= delay);
    //CountNeg = CountPos - SysTickValueGet();
}

// Time delay using busy wait.
// This assumes 80 MHz system clock.
void SysTick_Wait10ms(uint32_t delay)
{
    uint32_t i;
    for (i = 0; i < delay; i++)
    {
        SysTick_Wait(800000);  // wait 10ms (assumes 80 MHz clock)
    }
}
